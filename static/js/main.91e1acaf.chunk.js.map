{"version":3,"sources":["Welcome.js","actions/login.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","react_default","a","createElement","this","props","name","React","Component","loginRequest","_ref","regenerator_default","wrap","_context","prev","next","username","password","console","log","stop","_marked","Header","style","margin","float","AuthButton","react_router_dom","to","Protected","fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","PrivateRoute","component","rest","Object","objectWithoutProperties","react_router","assign","render","pathname","state","from","location","withRouter","_ref2","history","onClick","push","Login","show","redirectToReferrer","loginFail","handleClose","_this","setState","handleShow","validates","values","errors","confirm","_this2","required","value","undefined","Fragment","Button_default","Modal_default","onHide","react_final_form_es","onSubmit","_ref3","dirtyFields","handleSubmit","valid","submitting","touched","closeButton","Title","Body","validate","_ref4","input","meta","type","placeholder","width","color","error","_ref5","Footer","variant","disabled","App","exact","path","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91e1acaf.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\n class Welcome extends React.Component {\r\n    render() {\r\n      return <h1>Welcome, {this.props.name}</h1>;\r\n    }\r\n  }\r\n\r\n  export default Welcome\r\n  ","\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST'\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nexport const LOGIN_ERROR = 'LOGIN_ERROR'\nexport const LOGIN_CANCEL = 'LOGIN_CANCEL'\n\nexport function* loginRequest({ username, password }) {\n    console.log(`loginrequest`)\n    // return {\n    //     type: LOGIN_REQUEST,\n    //     username,\n    //     password\n    // }\n}\n\nexport function* loginSucess(response) {\n    return {\n        type: LOGIN_SUCCESS,\n        response\n    }\n}\n\nexport function* loginError(error) {\n    return {\n        type: LOGIN_ERROR,\n        error\n    }\n}\n\nexport function* loginCancel() {\n    return {\n        type: LOGIN_CANCEL\n    }\n}","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport { BrowserRouter as Router, Route, Link, Redirect, withRouter } from \"react-router-dom\";\n\nimport Welcome from './Welcome'\n// import Example from './SignIn'\n\nimport {connect} from 'react-redux'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nimport { Form, Field } from 'react-final-form'\n\nimport { loginRequest, loginCancel } from './actions/login.js'\n// import { isImport } from '@babel/types';\n// import rootSaga from './sagas/index.js'\n\n// import { createStore, applyMiddleware } from 'redux'\n\n// import createSagaMiddleware from 'redux-saga'\n// import rootReducer from './reducers/index.js'\n\n// const sagaMiddleware = createSagaMiddleware()\n\n// const store = createStore(\n//   rootReducer,\n//   applyMiddleware(sagaMiddleware)\n// )\n// sagaMiddleware.run(rootSaga)\n\n\n\n// const sagaMiddleware = createSagaMiddleware()\n\n\n// const store = createStore(\n//   rootReducer\n//   ,applyMiddleware(sagaMiddleware))\n\n// sagaMiddleware.run(rootSaga)\n\n// const action = type => store.dispatch({type})\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header />\n        <Route exact path=\"/\" component={Welcome}  />\n        <Route path=\"/login\" component={Login} />\n        <PrivateRoute path=\"/protected\" component={Protected} />\n      </div>\n    </Router>\n  );\n}\n\n\nfunction Header() {\n  return (\n    <div style={{margin:'10px 10px',  float: 'left'}}> \n      <AuthButton />\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Public Page</Link>\n          </li>\n          <li>\n            <Link to=\"/protected\">Protected Page</Link>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction Protected() {\n  return <h3>Protected</h3>;\n}\n\nconst fakeAuth = {\n  isAuthenticated: false,\n  authenticate: (cb) => {\n    fakeAuth.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n  signout: (cb) => {\n    fakeAuth.isAuthenticated = false;\n    setTimeout(cb, 100);\n  }\n};\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        fakeAuth.isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n            <Redirect\n              to={{\n                pathname: \"/login\",\n                state: { from: props.location }\n              }}\n            />\n          )\n      }\n    />\n  );\n}\n\n\nconst AuthButton = withRouter(\n  ({ history }) =>\n    fakeAuth.isAuthenticated ? (\n      <p>\n        Welcome!{\" \"}\n        <button\n          onClick={() => {\n            fakeAuth.signout(() => history.push(\"/\"));\n          }}\n        >\n          Sign out\n        </button>\n      </p>\n    ) : (\n        <p>You are not logged in.</p>\n      )\n);\n\n\n\nclass Login extends React.Component {\n\n  state = { show: false, redirectToReferrer: false, loginFail: false }\n\n  handleClose = () => {\n    this.setState({ show: false, redirectToReferrer: false, loginFail: false });\n  }\n\n  handleShow = () => {\n    this.setState({ show: true });\n  }\n\n  validates = (values) => {\n    const errors = {};\n    if (!values.username) {\n      errors.username = \"Required\";\n    }\n    if (!values.password) {\n      errors.password = \"Required\";\n    }\n    if (!values.confirm) {\n      errors.confirm = \"Required\";\n    } else if (values.confirm !== values.password) {\n      errors.confirm = \"Must match\";\n    }\n    return errors;\n  }\n\n  render() {\n    let { from } = { from: { pathname: \"/protected\" } };\n    let { redirectToReferrer } = this.state;\n\n    \n    const required = value => (value ? undefined : 'Required')\n    // const { login, dispatch } = this.props\n    // const sendLoginRequest = ({ username, password }) => store.dispatch(loginRequest({ username, password }))\n\n\n    const handleLogin = (values) => {\n      // sendLoginRequest({ username: values.username, password: values.password })\n      // const sendLoginRequest = ({ username, password }) => store.dispatch(loginRequest({ username, password }))\n      // sendLoginRequest({ username: values.username, password: values.password })\n      // const { login, dispatch } = this.props\n      // const sendLoginRequest = ({ username, password }) => dispatch(loginRequest({ username, password }))\n  \n      // sendLoginRequest({ username: values.username, password: values.password })\n      loginRequest({username: values.username, password: values.password})\n      if (values.username === 'guest' && values.password === 'guest') {\n        this.setState({ loginFail: false })\n        fakeAuth.authenticate(() => {\n          this.setState({ show: false, redirectToReferrer: true });\n        });\n      }\n      else {\n        this.setState({ loginFail: true })\n      }\n    }\n\n\n\n    if (redirectToReferrer) return <Redirect to={from} />;\n\n    return (\n      <>\n        <p>You must log in to view the page at {from.pathname}</p>\n        <Button onClick={this.handleShow}> Login</Button>\n\n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Form\n            onSubmit={handleLogin}\n\n            render={({ dirtyFields, errors, handleSubmit, submitting, touched, valid, values }) => (\n              <form onSubmit={handleSubmit}>\n                <Modal.Header closeButton>\n                  <Modal.Title>Sign In</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <Field name=\"username\" validate={required}>\n                    {({ input, meta }) => (\n                      <div>\n                        <div>Username</div>\n                        <input  {...input} type=\"text\" placeholder=\"Enter username\" style={{ width: \"100%\" }} />\n                        <span style={{ color: \"red\" }}>{meta.error && meta.touched && <span>This is a required field.</span>}</span>\n                      </div>\n                    )}\n                  </Field>\n                  <Field name=\"password\" validate={required}>\n                    {({ input, meta }) => (\n                      <div>\n                        <div>Password</div>\n                        <input  {...input} type=\"password\" placeholder=\"Enter password\" style={{ width: \"100%\" }} />\n                        <span style={{ color: \"red\" }}>{meta.error && meta.touched && <span>This is a required field.</span>}</span>\n                      </div>\n                    )}\n                  </Field>\n                  <span style={{ color: \"red\" }}>{this.state.loginFail && <span>Incorrect username or password</span>}</span>\n                </Modal.Body>\n                <Modal.Footer>\n\n                  <Button variant=\"secondary\" onClick={this.handleClose}> Close</Button>\n                  <Button variant=\"primary\" disabled={!valid} type=\"submit\">Save Changes</Button>\n                </Modal.Footer>\n              </form>\n            )}\n          />\n        </Modal>\n      </>\n    );\n  }\n\n}\n\n// function mapStateToProps(state, ownProps) {\n//   const {login} = state\n//   return {login}\n// }\n\n// export default connect(mapStateToProps)(App)\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'babel-polyfill'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}